# -*- coding: utf-8 -*-

"""
QGIS Processing algorithm for cleaning manually annotated summit list
"""
__author__ = "dr. Kertész Csaba Zoltán"
__email__ = "csaba.kertesz@unitbv.ro"
__copyright__ = "© 2022, dr. Kertész Csaba Zoltán"
__license__ = "MIT"


from qgis.PyQt.QtCore import (QCoreApplication)

from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsFeature,
                       QgsGeometry,
                       NULL)


class CleanMergedSummits(QgsProcessingAlgorithm):
    """
    This algorithm is used to clean up the merged summits layer generated by
    the Merge Landserf script after it was manually reviewed.

    Cleaning up is based on the comments in the Notes field:
    m - will merge this row into another row identified by the Merge (or if it
        is unset the Cross field)
    k - is usually the target of a merging operation
    d - delete the row (it is an undefined/unneeded summit)
    x - exchange the col position with another summit marked in the Merge field
    """

    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CleanMergedSummits()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'cleanmergedsummits'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Clean Merged Landserf Summits')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('SOTA')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'sota'

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Clean merged summit list based on Notes field")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(
            parameters,
            self.INPUT,
            context
        )

        if source is None:
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                                 self.INPUT))

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            source.fields(),
            source.wkbType(),
            source.sourceCrs()
        )

        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters,
                                                               self.OUTPUT))

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        current = 0

        summits = {}
        summitsmerge = {}
        summitscross = {}

        # first make a list of summits that has to be merged or crossmatched
        for f in source.getFeatures():
            # bail out if requested
            if feedback.isCanceled():
                break

            merge = f['Merge'] if f['Merge'] else f['Cross']
            sid = f['ID']

            if f['Notes'] == 'd':
                continue
            elif f['Notes'] == 'm':
                if not merge or len(merge) != 5:
                    raise QgsProcessingException(
                        f"Wrong merge data for merge summit {sid}")
                summitsmerge[f['ID']] = merge
                sid = merge
            elif f['Notes'] == 'x':
                if not merge or len(merge) != 5:
                    raise QgsProcessingException(
                        f"Wromg crossref data for summit {sid}")
                # for cross-summits we just remember the col position for now
                summitscross[f['ID']] = f.geometry().vertexAt(1)
            elif f['Notes'] == 'k':
                pass
            elif f['Notes']:
                raise QgsProcessingException(
                    f"Unknown action for summit {sid}")

            if sid in summits:
                if isinstance(summits[sid], list):
                    summits[sid].append(f)
                else:
                    summits[sid] = [summits[sid], f]
            else:
                summits[sid] = f

        # do the second run doing the merge work
        for sid in summits:
            if feedback.isCanceled():
                break

            if isinstance(summits[sid], list):
                f = QgsFeature(source.fields())
                f['ID'] = sid
                gs = {}
                for fx in summits[sid]:
                    for k, v in fx.attributeMap().items():
                        # skip nulls
                        if v == NULL:
                            continue
                        # skip fid, id, merge and notes
                        if k in ('fid', 'ID'):
                            continue
                        if k in ('Merge', 'Notes'):
                            if fx['Notes'] != 'x':
                                continue                            
                        # prominence is set in all features, select only one
                        if k == 'Prominence':
                            if f['Notes'] != 'm':
                                f['Prominence'] = v
                            continue
                        # cross ids will be kept but mergeclean them
                        if k == 'Cross':
                            ids = set(summitsmerge.get(s,s) for s in v.split())
                            ids.discard(sid)
                            if f['Cross']:
                                ids |= set(f['Cross'].split())
                            if ids:
                                f['Cross'] = ' '.join(ids)
                            continue
                        # check if there is a dupe
                        if f[k] != NULL and f[k] is not None:
                            raise QgsProcessingException(
                                f"Duplicate field {k} for summit {fx['ID']}"
                                f" merging into {sid}")
                        f[k] = v
                    # deconstruct geometries
                    geom_list = fx.geometry().asGeometryCollection()
                    geom_list_index = 0
                    g0 = geom_list[0]
                    if fx['Notes'] != 'm':
                        if 'g0' in gs:
                            raise QgsProcessingException(
                                f"Too many targets for merge {sid}")
                        gs['g0'] = g0
                    for x in ['SRTM', 'ASTER', 'ALOS', 'TDX', 'GLO30']:
                        if fx[x + ' Elevation'] != NULL:
                            geom_list_index += 1
                            if geom_list_index >= len(geom_list):
                                raise QgsProcessingException(
                                    f"geometry mismatch in {fx['ID']}, {len(geom_list)} {x + ' Elevation'} {type(fx[x + ' Elevation'])}")
                            gs[x] = geom_list[geom_list_index]
                # reconstruct geometry
                if 'g0' not in gs:
                    raise QgsProcessingException(
                        f"Missing target geometry for mergin {sid}")
                f.setGeometry(QgsGeometry.collectGeometry(
                    gs[x] for x in ['g0',
                                    'SRTM',
                                    'ASTER',
                                    'ALOS',
                                    'TDX',
                                    'GLO30'] if x in gs))
                current += len(summits[sid]) - 1
            else:
                f = summits[sid]

            if f['Notes'] == 'x':
                g = f.geometry()
                merge = f['Merge'] if f['Merge'] else f['Cross']
                feedback.pushInfo(f"Moving col vertex of {sid} to {merge}")
                
                g.moveVertex(summitscross[merge], 1)
                f.setGeometry(g)
                f['Notes'] = None
                f['Cross'] = f['Merge']
                f['Merge'] = None

            sink.addFeature(f, QgsFeatureSink.FastInsert)

            # Update the progress bar
            current += 1
            feedback.setProgress(int(current * total))

        return {self.OUTPUT: dest_id}
